#include <stdio.h>

// Function to print array during each partition (optional for debug)
void printPass(int a[], int start, int end) {
    printf("Pass: ");
    for (int i = start; i <= end; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

// Partition function
int partition(int a[], int low, int high) {
    int pivot = a[high];
    int i = low - 1;
    int temp;

    for (int j = low; j < high; j++) {
        if (a[j] < pivot) {
            i++;
            // swap a[i] and a[j]
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
    }

    // swap a[i+1] and a[high] (pivot)
    temp = a[i + 1];
    a[i + 1] = a[high];
    a[high] = temp;

    printPass(a, low, high); // Debug print
    return i + 1;
}

// Quick Sort function
void quicksort(int a[], int low, int high) {
    if (low < high) {
        int p = partition(a, low, high);
        quicksort(a, low, p - 1);
        quicksort(a, p + 1, high);
    }
}

// Main function
int main() {
    int n;
    printf("number of elements: ");
    scanf("%d", &n);

    int a[n];
    printf("elements: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    quicksort(a, 0, n - 1);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

